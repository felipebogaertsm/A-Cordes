[{"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\index.js":"1","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\App.js":"3","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\store.js":"4","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Footer.js":"5","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Header.js":"6","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductScreen.js":"7","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\HomeScreen.js":"8","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\LoginScreen.js":"9","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\RegisterScreen.js":"10","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProfileScreen.js":"11","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\CartScreen.js":"12","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\OrderScreen.js":"13","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ShippingScreen.js":"14","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\PaymentScreen.js":"15","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\PlaceOrderScreen.js":"16","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\AboutScreen.js":"17","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\UserListScreen.js":"18","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\UserEditScreen.js":"19","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductListScreen.js":"20","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\cartReducers.js":"21","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\productReducers.js":"22","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\userReducers.js":"23","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\orderReducers.js":"24","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Loader.js":"25","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Message.js":"26","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Rating.js":"27","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Product.js":"28","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\FormContainer.js":"29","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\CheckoutSteps.js":"30","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\userActions.js":"31","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\orderActions.js":"32","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\productActions.js":"33","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\cartActions.js":"34","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\cartConstants.js":"35","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\userConstants.js":"36","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\orderConstants.js":"37","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\productConstants.js":"38","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductEditScreen.js":"39","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\OrderListScreen.js":"40"},{"size":597,"mtime":1625012702685,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1618615238000,"results":"43","hashOfConfig":"42"},{"size":2515,"mtime":1631734326827,"results":"44","hashOfConfig":"42"},{"size":2426,"mtime":1632313321257,"results":"45","hashOfConfig":"42"},{"size":414,"mtime":1621738962000,"results":"46","hashOfConfig":"42"},{"size":3204,"mtime":1630856411140,"results":"47","hashOfConfig":"42"},{"size":9534,"mtime":1632475247497,"results":"48","hashOfConfig":"42"},{"size":1140,"mtime":1625140522614,"results":"49","hashOfConfig":"42"},{"size":2687,"mtime":1629040435734,"results":"50","hashOfConfig":"42"},{"size":4136,"mtime":1630851573236,"results":"51","hashOfConfig":"42"},{"size":6805,"mtime":1631190801958,"results":"52","hashOfConfig":"42"},{"size":4858,"mtime":1625183291651,"results":"53","hashOfConfig":"42"},{"size":9310,"mtime":1632312833986,"results":"54","hashOfConfig":"42"},{"size":3375,"mtime":1630531245249,"results":"55","hashOfConfig":"42"},{"size":1804,"mtime":1630532686624,"results":"56","hashOfConfig":"42"},{"size":6525,"mtime":1630624372749,"results":"57","hashOfConfig":"42"},{"size":178,"mtime":1629041567557,"results":"58","hashOfConfig":"42"},{"size":3300,"mtime":1631190396409,"results":"59","hashOfConfig":"42"},{"size":3971,"mtime":1631373566499,"results":"60","hashOfConfig":"42"},{"size":4469,"mtime":1631280331579,"results":"61","hashOfConfig":"42"},{"size":1554,"mtime":1630624785935,"results":"62","hashOfConfig":"42"},{"size":3538,"mtime":1632313294773,"results":"63","hashOfConfig":"42"},{"size":4110,"mtime":1631190963895,"results":"64","hashOfConfig":"42"},{"size":4234,"mtime":1631913689978,"results":"65","hashOfConfig":"42"},{"size":478,"mtime":1625140286686,"results":"66","hashOfConfig":"42"},{"size":244,"mtime":1625140439308,"results":"67","hashOfConfig":"42"},{"size":1945,"mtime":1621985559342,"results":"68","hashOfConfig":"42"},{"size":1041,"mtime":1621987192774,"results":"69","hashOfConfig":"42"},{"size":397,"mtime":1629037253191,"results":"70","hashOfConfig":"42"},{"size":1614,"mtime":1630531169386,"results":"71","hashOfConfig":"42"},{"size":7802,"mtime":1631191478735,"results":"72","hashOfConfig":"42"},{"size":6259,"mtime":1631913974528,"results":"73","hashOfConfig":"42"},{"size":5545,"mtime":1632313519835,"results":"74","hashOfConfig":"42"},{"size":1365,"mtime":1630532538686,"results":"75","hashOfConfig":"42"},{"size":290,"mtime":1630624591485,"results":"76","hashOfConfig":"42"},{"size":1536,"mtime":1631190852960,"results":"77","hashOfConfig":"42"},{"size":1264,"mtime":1631913641901,"results":"78","hashOfConfig":"42"},{"size":1377,"mtime":1632313203189,"results":"79","hashOfConfig":"42"},{"size":7387,"mtime":1631571965690,"results":"80","hashOfConfig":"42"},{"size":3236,"mtime":1631734372914,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"19e93fr",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"84"},"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\index.js",[],["179","180"],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\App.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\store.js",["181"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { cartReducer } from './reducers/cartReducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {\r\n    productListReducer,\r\n    productDetailsReducer,\r\n    productDeleteReducer,\r\n    productCreateReducer,\r\n    productUpdateReducer,\r\n    productReviewCreateReducer,\r\n} from './reducers/productReducers';\r\nimport {\r\n    userLoginReducer,\r\n    userRegisterReducer,\r\n    userDetailsReducer,\r\n    userUpdateProfileReducer,\r\n    userListReducer,\r\n    userDeleteReducer,\r\n    userUpdateReducer,\r\n} from './reducers/userReducers';\r\nimport {\r\n    orderCreateReducer,\r\n    orderDetailsReducer,\r\n    orderPayReducer,\r\n    orderListMyReducer,\r\n    orderListReducer,\r\n    orderDeliverReducer,\r\n} from './reducers/orderReducers';\r\n\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productDelete: productDeleteReducer,\r\n    productCreate: productCreateReducer,\r\n    productUpdate: productUpdateReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n\r\n    cart: cartReducer,\r\n\r\n    userLogin: userLoginReducer,\r\n    userRegister: userLoginReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    userList: userListReducer,\r\n    userDelete: userDeleteReducer,\r\n    userUpdate: userUpdateReducer,\r\n\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListMy: orderListMyReducer,\r\n    orderList: orderListReducer,\r\n    orderDeliver: orderDeliverReducer,\r\n});\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\r\n    JSON.parse(localStorage.getItem('cartItems')) : [];\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\r\n    JSON.parse(localStorage.getItem('userInfo')) : null;\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\r\n    JSON.parse(localStorage.getItem('shippingAddress')) : {};\r\n\r\nconst initialState = {\r\n    cart: {\r\n        cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage,\r\n    },\r\n    userLogin: { userInfo: userInfoFromStorage },\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Footer.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Header.js",["182","183"],"import { Navbar, Nav, NavDropdown, Container, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { logout } from '../actions/userActions'\nimport React from 'react'\n\nfunction Header() {\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin;\n\n    const dispatch = useDispatch();\n\n    const logoutHandler = () => {\n        dispatch(logout())\n    };\n\n    return (\n        <header>\n        <Navbar bg=\"dark\" variant=\"dark\" collapseOnSelect expand=\"lg\">\n            <Container>\n\n                <LinkContainer to=\"/\">\n                    <Navbar.Brand>à cordes</Navbar.Brand>\n                </LinkContainer>\n\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <LinkContainer to=\"/\">\n                            <Nav.Link><i className=\"fas fa-home px-2\"></i>Home</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/cart\">\n                            <Nav.Link><i className=\"fas fa-shopping-cart px-2\"></i>Cart</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/about\">\n                            <Nav.Link><i className=\"fas fa-arrow-circle-right px-2\"></i>About us</Nav.Link>\n                        </LinkContainer>\n                    </Nav>\n\n                    <Nav>\n                        {userInfo ? (\n                            <NavDropdown title={userInfo.name} id='username'>\n                                <LinkContainer to='/profile'>\n                                    <NavDropdown.Item>Profile</NavDropdown.Item>\n                                </LinkContainer>\n\n                                <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                            </NavDropdown>\n                        ) : (\n                            <LinkContainer to=\"/login\">\n                                <Nav.Link><i className=\"fas fa-user px-2\"></i>Log in</Nav.Link>\n                            </LinkContainer>\n                        )}\n\n                        {userInfo && userInfo.is_admin && (\n                            <NavDropdown title='Admin' id='adminmenu'>\n                                <LinkContainer to='/admin/userList'>\n                                    <NavDropdown.Item>Users</NavDropdown.Item>\n                                </LinkContainer>\n                                <LinkContainer to='/admin/productList'>\n                                    <NavDropdown.Item>Products</NavDropdown.Item>\n                                </LinkContainer>\n                                <LinkContainer to='/admin/orderList'>\n                                    <NavDropdown.Item>Orders</NavDropdown.Item>\n                                </LinkContainer>\n                            </NavDropdown>\n                        )}\n                    </Nav>\n                </Navbar.Collapse>\n\n            </Container>\n        </Navbar>\n        </header>\n    )\n}\n\nexport default Header;\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductScreen.js",["184","185","186"],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\HomeScreen.js",["187"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Product from '../components/Product';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { listProducts } from '../actions/productActions';\r\n\r\nfunction HomeScreen() {\r\n    const dispatch = useDispatch();\r\n    const productList = useSelector(state => state.productList);\r\n    const { error, loading, products } = productList;\r\n\r\n    useEffect(() => {\r\n        dispatch(listProducts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n          <h1>Latest products</h1>\r\n          {loading ? <Loader />\r\n            : error ? <Message variant='danger'>{error}</Message>\r\n                :\r\n                <Row>\r\n                  {products.map(product => (\r\n                    <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                      <Product product={product} />\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\RegisterScreen.js",["188"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport FormContainer from '../components/FormContainer';\r\nimport { register } from '../actions/userActions';\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/';\r\n\r\n    const userRegister = useSelector(state => state.userRegister);\r\n    const { error, loading, userInfo } = userRegister;\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect);\r\n        }\r\n    }, [history, userInfo, redirect]);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match');\r\n        } else {\r\n            dispatch(register(name, email, password));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Register</h1>\r\n\r\n            { message && <Message variant='danger'>{message}</Message> }\r\n            { error && <Message variant='danger'>{error}</Message> }\r\n            { loading && <Loader /> }\r\n\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name' className='py-3'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email' className='py-3'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password' className='py-3'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm' className='py-3'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <div className='py-3'>\r\n                    <Button type='submit' variant='primary'>Register</Button>\r\n                </div>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}\r\n                    >Sign In</Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProfileScreen.js",["189","190"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Button, Form, Table } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\r\nimport { listMyOrders } from '../actions/orderActions';\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const userDetails = useSelector(state => state.userDetails);\r\n    const { error, loading, user } = userDetails;\r\n\r\n    const userLogin = useSelector(state => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile);\r\n    const { success } = userUpdateProfile;\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy);\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login');\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success]);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match');\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password,\r\n            }));\r\n            setMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                { message && <Message variant='danger'>{message}</Message> }\r\n                { error && <Message variant='danger'>{error}</Message> }\r\n                { loading && <Loader /> }\r\n\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name' className='py-3'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter Name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email' className='py-3'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password' className='py-3'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm' className='py-3'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <div className='py-3'>\r\n                        <Button type='submit' variant='primary'>Update</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n\r\n            </Col>\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n\r\n                {loadingOrders ? (\r\n                    <Loader/>\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                    <Table striped responsive className='table-sm'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td>{order._id}</td>\r\n                                    <td>{order.createdAt.substring(0, 10)}</td>\r\n                                    <td>${order.totalPrice}</td>\r\n                                    <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                        <i className='fas fa-times' style={{color: 'red'}}></i>\r\n                                    )}</td>\r\n                                    <td>\r\n                                        <LinkContainer to={`/order/${order._id}`}>\r\n                                            <Button className='btn btn-sm'>Details</Button>\r\n                                        </LinkContainer>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\OrderScreen.js",["191","192"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport {\r\n    getOrderDetails,\r\n    payOrder,\r\n    deliverOrder,\r\n} from '../actions/orderActions';\r\nimport {\r\n    ORDER_PAY_RESET,\r\n    ORDER_DELIVER_RESET,\r\n} from '../constants/orderConstants';\r\n\r\nfunction OrderScreen({ match, history }) {\r\n\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.quantity, 0).toFixed(2)\r\n    }\r\n\r\n    // Client ID from PayPal sandbox acc:\r\n    var clientId = 'AWx0_BXJE1BTWDwjPMYzuD8jEKAKswU5WDxe3MFB42zaQ4sZp2SaGDIuTEgTi1gK6oIiaoGrl6YBsEY_'\r\n\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=' + clientId\r\n        script.async = true\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch({ type: ORDER_DELIVER_RESET })\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = (deliverResult) => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n    ) : (\r\n        <div>\r\n            <h1>Order: {order._id}</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p><strong>Name: </strong> {order.user.name}</p>\r\n                            <p>\r\n                                <strong>Email: </strong> <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {order.ShippingAddress.address}, {order.ShippingAddress.city}\r\n                                {'      '}\r\n                                {order.ShippingAddress.postalCode},\r\n                                {'      '}\r\n                                {order.ShippingAddress.country}\r\n                            </p>\r\n                            {order.isDelivered ? (\r\n                                <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                            ) : (\r\n                                <Message variant='info'>Not delivered</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                            </p>\r\n                            {order.isPaid ? (\r\n                                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                            ) : (\r\n                                <Message variant='warning'>Not paid</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length == 0 ? <Message variant='info'>\r\n                                Your order is empty\r\n                            </Message> : (\r\n                                <ListGroup variant='flush'>\r\n                                    {order.orderItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    {item.quantity} X ${item.price} = ${(item.quantity * item.price).toFixed(2)}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Item:</Col>\r\n                                    <Col>${order.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${order.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${order.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col><strong>Total:</strong></Col>\r\n                                    <Col>${order.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            {!order.isPaid && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? (\r\n                                        <Loader />\r\n                                    ) : (\r\n                                        <PayPalButton\r\n                                            amount={order.totalPrice}\r\n                                            onSuccess={successPaymentHandler}\r\n                                        />\r\n                                    )}\r\n                                </ListGroup.Item>\r\n                            )}\r\n\r\n                        </ListGroup>\r\n\r\n                        {loadingDeliver && <Loader />}\r\n\r\n                        {userInfo && userInfo.is_admin && order.isPaid && !order.isDelivered && (\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn btn-block'\r\n                                    onClick={deliverHandler}\r\n                                >\r\n                                    Mark as delivered\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                    </Card>\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderScreen\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ShippingScreen.js",["193"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FormContainer from '../components/FormContainer';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { saveShippingAddress } from '../actions/cartActions';\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address);\r\n    const [city, setCity] = useState(shippingAddress.city);\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\r\n    const [country, setCountry] = useState(shippingAddress.country);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n\r\n            <CheckoutSteps step1 step2/>\r\n\r\n            <h1>Shipping</h1>\r\n\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address' className='py-3'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={ address ? address : '' }\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city' className='py-3'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter City'\r\n                        value={ city ? city : '' }\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode' className='py-3'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Postal Code'\r\n                        value={ postalCode ? postalCode : '' }\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country' className='py-3'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Country'\r\n                        value={ country ? country : '' }\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\PaymentScreen.js",["194"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Form, Col } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FormContainer from '../components/FormContainer';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { savePaymentMethod } from '../actions/cartActions';\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    if (!shippingAddress.address) {\r\n        history.push('/shipping')\r\n    }  // if user does not have shipping address, redirect to shipping page\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n\r\n            <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group>\r\n                <Form.Label as='legend'>Select Method</Form.Label>\r\n                <Col>\r\n                    <Form.Check\r\n                        type='radio'\r\n                        label='PayPal or Credit Card'\r\n                        id='paypal'\r\n                        name='paymentMethod'\r\n                        checked\r\n                        onChange={(e) => setPaymentMethod(e.target.value)}\r\n                    >\r\n                    </Form.Check>\r\n                </Col>\r\n            </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\PlaceOrderScreen.js",["195","196","197","198"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { createOrder } from '../actions/orderActions';\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants';\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = Number(0.092 * cart.itemsPrice).toFixed(2)\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city}\r\n                                {'      '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'      '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length == 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                <ListGroup variant='flush'>\r\n                                    {cart.cartItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n\r\n                <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Order Summary</h2>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Item:</Col>\r\n                                <Col>${cart.itemsPrice}</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Shipping:</Col>\r\n                                <Col>${cart.shippingPrice}</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Tax:</Col>\r\n                                <Col>${cart.taxPrice}</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col><strong>Total:</strong></Col>\r\n                                <Col>${cart.totalPrice}</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            {error && <Message variant='danger'>{error}</Message>}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Button\r\n                                type='button'\r\n                                className='btn-block'\r\n                                disabled={cart.cartItems == 0}\r\n                                onClick={placeOrder}\r\n                            >\r\n                                Place Order\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\AboutScreen.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\UserListScreen.js",["199","200"],"import React, { useState, useEffect } from 'react';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { listUsers, deleteUser } from '../actions/userActions';\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.is_admin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, successDelete])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm(`Are you sure you want to delete user ID ${id}?`)) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n\r\n            {loading ? (\r\n                <Loader/>\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Admin</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {users.map(user => (\r\n                            <tr key={user._id}>\r\n                                <td>{user._id}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.is_admin ? (\r\n                                        <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                    ) : (\r\n                                        <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                    )}\r\n                                </td>\r\n                                <td>\r\n                                    <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                        <Button variant='light' className='btn-sm'>\r\n                                            <i className='fas fa-edit'></i>\r\n                                        </Button>\r\n                                    </LinkContainer>\r\n\r\n                                    <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                        <i className='fas fa-trash'></i>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\UserEditScreen.js",["201"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport FormContainer from '../components/FormContainer';\r\nimport { getUserDetails, updateUser } from '../actions/userActions';\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id;\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const userDetails = useSelector(state => state.userDetails);\r\n    const { error, loading, user } = userDetails;\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate);\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate;\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({type: USER_UPDATE_RESET})\r\n            history.push('/admin/userList')\r\n        } else {\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history]);\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin: isAdmin }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Link to='/admin/userList'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n\r\n                {loadingUpdate && <Loader/>}\r\n                {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> : (\r\n                    <Form onSubmit={submitHandler}>\r\n\r\n                        <Form.Group controlId='name' className='py-3'>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type='name'\r\n                                placeholder='Enter Name'\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            >\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='email' className='py-3'>\r\n                            <Form.Label>Email Address</Form.Label>\r\n                            <Form.Control\r\n                                type='email'\r\n                                placeholder='Enter Email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            >\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='isAdmin' className='py-3'>\r\n                            <Form.Check\r\n                                type='checkbox'\r\n                                label='Is Admin'\r\n                                checked={isAdmin}\r\n                                onChange={(e) => setIsAdmin(e.target.checked)}\r\n                            >\r\n                            </Form.Check>\r\n                        </Form.Group>\r\n\r\n                        <div className='py-3'>\r\n                            <Button type='submit' variant='primary'>Update</Button>\r\n                        </div>\r\n\r\n                    </Form>\r\n                )}\r\n\r\n            </FormContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserEditScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductListScreen.js",["202"],"import React, { useState, useEffect } from 'react';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Button, Table, Row, Col } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions';\r\nimport { PRODUCT_CREATE_RESET } from'../constants/productConstants';\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.is_admin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts())\r\n        }\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm(`Are you sure you want to delete product ID ${id}?`)) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n                <Col className=''>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader/>}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n            {loadingCreate && <Loader/>}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading ? (\r\n                <Loader/>\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Price</th>\r\n                            <th>Category</th>\r\n                            <th>In Stock</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {products.map(product => (\r\n                            <tr key={product._id}>\r\n                                <td>{product._id}</td>\r\n                                <td>{product.name}</td>\r\n                                <td>${product.price}</td>\r\n                                <td>{product.category}</td>\r\n                                <td>{product.countInStock}</td>\r\n                                <td>{product.seller}</td>\r\n                                <td>\r\n                                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                        <Button variant='light' className='btn-sm'>\r\n                                            <i className='fas fa-edit'></i>\r\n                                        </Button>\r\n                                    </LinkContainer>\r\n\r\n                                    <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                        <i className='fas fa-trash'></i>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen;\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Loader.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Message.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Rating.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\Product.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\userActions.js",["203","204"],"import axios from 'axios';\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_RESET,\r\n} from '../constants/userConstants';\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const {data} = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        );  // send email and password and get back a token\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const {data} = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        );  // send email and password and get back a token\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.get(\r\n            '/api/users/',\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        });\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\orderActions.js",["205","206","207"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n} from '../constants/orderConstants'\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n            order,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data,\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`,\r\n            {},\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/myorders/`,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/`,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\productActions.js",["208"],"import axios from 'axios';\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n} from '../constants/productConstants';\r\n\r\nexport const listProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST });\r\n        const { data } = await axios.get('/api/products/');\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST });\r\n        const { data } = await axios.get(`/api/products/${id}`);\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}`,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            }\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            review,\r\n            config,\r\n        );\r\n\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\ProductEditScreen.js",[],"C:\\Users\\felip\\Dropbox\\Programs\\A-Cordes\\a-cordes-frontend\\src\\screens\\OrderListScreen.js",["209","210"],"import React, { useState, useEffect } from 'react';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { listOrders } from '../actions/orderActions';\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.is_admin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n\r\n            {loading ? (\r\n                <Loader/>\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>User</th>\r\n                            <th>Date</th>\r\n                            <th>Total</th>\r\n                            <th>Paid</th>\r\n                            <th>Delivered</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {orders.map(order => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id}</td>\r\n                                <td>{order.user && order.user.name}</td>\r\n                                <td>{order.createdAt.substring(0, 10)}</td>\r\n                                <td>{order.totalPrice}</td>\r\n                                <td>{order.isPaid ? (\r\n                                        order.paidAt.substring(0, 10)\r\n                                    ) : (\r\n                                        <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                    )}\r\n                                </td>\r\n                                <td>{order.isDelivered ? (\r\n                                        order.deliveredAt.substring(0, 10)\r\n                                    ) : (\r\n                                        <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                    )}\r\n                                </td>\r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button variant='light' className='btn-sm'>\r\n                                            Details\r\n                                        </Button>\r\n                                    </LinkContainer>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen;\r\n",{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":15,"column":5,"nodeType":"217","messageId":"218","endLine":15,"endColumn":24},{"ruleId":"215","severity":1,"message":"219","line":1,"column":47,"nodeType":"217","messageId":"218","endLine":1,"endColumn":50},{"ruleId":"215","severity":1,"message":"220","line":1,"column":52,"nodeType":"217","messageId":"218","endLine":1,"endColumn":55},{"ruleId":"215","severity":1,"message":"221","line":20,"column":13,"nodeType":"217","messageId":"218","endLine":20,"endColumn":20},{"ruleId":"215","severity":1,"message":"222","line":20,"column":22,"nodeType":"217","messageId":"218","endLine":20,"endColumn":27},{"ruleId":"223","severity":1,"message":"224","line":132,"column":68,"nodeType":"225","messageId":"226","endLine":132,"endColumn":70},{"ruleId":"215","severity":1,"message":"227","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"223","severity":1,"message":"228","line":33,"column":22,"nodeType":"225","messageId":"226","endLine":33,"endColumn":24},{"ruleId":"215","severity":1,"message":"229","line":2,"column":10,"nodeType":"217","messageId":"218","endLine":2,"endColumn":14},{"ruleId":"223","severity":1,"message":"228","line":52,"column":22,"nodeType":"225","messageId":"226","endLine":52,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":73,"column":8,"nodeType":"232","endLine":73,"endColumn":62,"suggestions":"233"},{"ruleId":"223","severity":1,"message":"224","line":132,"column":54,"nodeType":"225","messageId":"226","endLine":132,"endColumn":56},{"ruleId":"215","severity":1,"message":"234","line":2,"column":20,"nodeType":"217","messageId":"218","endLine":2,"endColumn":29},{"ruleId":"215","severity":1,"message":"234","line":2,"column":20,"nodeType":"217","messageId":"218","endLine":2,"endColumn":29},{"ruleId":"215","severity":1,"message":"227","line":2,"column":10,"nodeType":"217","messageId":"218","endLine":2,"endColumn":18},{"ruleId":"230","severity":1,"message":"235","line":34,"column":8,"nodeType":"232","endLine":34,"endColumn":26,"suggestions":"236"},{"ruleId":"223","severity":1,"message":"224","line":78,"column":52,"nodeType":"225","messageId":"226","endLine":78,"endColumn":54},{"ruleId":"223","severity":1,"message":"224","line":149,"column":58,"nodeType":"225","messageId":"226","endLine":149,"endColumn":60},{"ruleId":"215","severity":1,"message":"227","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"237","line":28,"column":8,"nodeType":"232","endLine":28,"endColumn":42,"suggestions":"238"},{"ruleId":"230","severity":1,"message":"239","line":42,"column":8,"nodeType":"232","endLine":42,"endColumn":46,"suggestions":"240"},{"ruleId":"215","severity":1,"message":"227","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"241","line":20,"column":5,"nodeType":"217","messageId":"218","endLine":20,"endColumn":30},{"ruleId":"215","severity":1,"message":"242","line":34,"column":5,"nodeType":"217","messageId":"218","endLine":34,"endColumn":22},{"ruleId":"215","severity":1,"message":"243","line":14,"column":5,"nodeType":"217","messageId":"218","endLine":14,"endColumn":20},{"ruleId":"215","severity":1,"message":"244","line":19,"column":5,"nodeType":"217","messageId":"218","endLine":19,"endColumn":24},{"ruleId":"215","severity":1,"message":"245","line":28,"column":5,"nodeType":"217","messageId":"218","endLine":28,"endColumn":24},{"ruleId":"215","severity":1,"message":"246","line":81,"column":17,"nodeType":"217","messageId":"218","endLine":81,"endColumn":21},{"ruleId":"215","severity":1,"message":"227","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"237","line":25,"column":8,"nodeType":"232","endLine":25,"endColumn":27,"suggestions":"247"},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'userRegisterReducer' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addPayPalScript', 'history', and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["250"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["253"],"'USER_UPDATE_PROFILE_RESET' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'data' is assigned a value but never used.",["254"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history, addPayPalScript]",{"range":"265","text":"266"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"267","text":"268"},"Update the dependencies array to be: [dispatch, history, successDelete, userInfo]",{"range":"269","text":"270"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"271","text":"272"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"273","text":"274"},[2473,2527],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history, addPayPalScript]",[1325,1343],"[success, history, order._id, dispatch]",[954,988],"[dispatch, history, successDelete, userInfo]",[1488,1526],"[user, userId, successUpdate, history, dispatch]",[834,853],"[dispatch, history, userInfo]"]